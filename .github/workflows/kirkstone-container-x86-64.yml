name: kirkstone-container-x86_64

on:
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
  release:
    types: [ published, created, edited ]
  workflow_dispatch:
  schedule:
    # daily
    - cron:  '0 0 * * *'

jobs:

  linux-dummy:

    env:
      YOCTO_VERSION: 4.0
      YOCTO_BRANCH: kirkstone

    runs-on: [self-hosted, linux]

    container:
      image: ghcr.io/meta-flutter/ubuntu-20-dev:main
      options:
        --user 1018
        --storage-opt overlay.mount_program=/usr/bin/fuse-overlayfs
        --storage-opt overlay.mountopt=nodev,metacopy=on,noxattrs=1
        -v /mnt/raid10/github-ci/download:/home/dev/dl:Z
        -v /mnt/raid10/github-ci/sstate/yocto/kirkstone/latest:/home/dev/sstate:Z

    steps:

      - name: Display UID Info
        run: |
          whoami
          id -u

      - name: Set Ownership
        run: |
          chown -R dev:dev $HOME .

      - uses: actions/checkout@v3
        with:
          path: ''

      - name: Fetch poky
        run: |
          [ -d ../yocto-kirkstone ] || mkdir -p ../yocto-kirkstone
          cd ../yocto-kirkstone
          pwd
          ls -la
          rm -rf poky meta-openembedded meta-clang
          git clone -b ${{ env.YOCTO_BRANCH }} --single-branch git://git.yoctoproject.org/poky &
          git clone -b ${{ env.YOCTO_BRANCH }} --single-branch git://git.openembedded.org/meta-openembedded &
          git clone -b ${{ env.YOCTO_BRANCH }} --single-branch https://github.com/kraj/meta-clang.git &
          wait

      - name: Configure build
        shell: bash
        working-directory: ../yocto-kirkstone
        run: |
          rm -rf build/conf
          . ./poky/oe-init-build-env
          echo '***************************************'
          echo 'INHERIT += "rm_work"' >> ./conf/local.conf
          echo 'DL_DIR = "/home/dev/dl"' >> ./conf/local.conf
          echo 'SSTATE_DIR = "/home/dev/sstate"' >> ./conf/local.conf
          echo 'SSTATE_MIRRORS = "file://.* file:///home/dev/sstate/PATH"' >> ./conf/local.conf
          echo 'INIT_MANAGER = "systemd"' >> ./conf/local.conf
          echo 'DISTRO_FEATURES:remove = "sysvinit"' >> ./conf/local.conf
          echo 'DISTRO_FEATURES:append = " wayland opengl"' >> ./conf/local.conf
          echo 'DISTRO_FEATURES_BACKFILL_CONSIDERED = ""' >> ./conf/local.conf
          echo 'INHIBIT_PACKAGE_DEBUG_SPLIT = "1"' >> ./conf/local.conf
          echo 'PREFERRED_PROVIDER:virtual/kernel = "linux-dummy"' >> ./conf/local.conf
          echo 'IMAGE_CONTAINER_NO_DUMMY = "1"' >> conf/local.conf
          echo 'IMAGE_FSTYPES = "container"' >> conf/local.conf
          echo 'IMAGE_LINGUAS:append = " en-us"' >> conf/local.conf
          echo 'LICENSE_FLAGS_ACCEPTED = "commercial"' >> ./conf/local.conf
          echo 'PACKAGECONFIG:append:pn-flutter-engine-runtimerelease = " desktop-embeddings"' >> conf/local.conf
          echo 'IMAGE_INSTALL:append = " \
              flutter-test-frb-runtimerelease \
              flutter-test-membrane-runtimerelease \
              flutter-test-animated-background-runtimerelease \
              flutter-test-membrane-runtimerelease \
              flutter-app-igalia-homescreen-runtimerelease \
              flutter-app-pumped-fuel-ped-runtimerelease \
              flutter-engine-runtimerelease \
              flutter-auto-runtimerelease \
              flutter-pi-runtimerelease \
              ivi-homescreen-runtimerelease \
              flutter-drm-eglstream-backend-runtimerelease \
              flutter-drm-gbm-backend-runtimerelease \
              flutter-external-texture-plugin-runtimerelease \
              flutter-video-player-plugin-runtimerelease \
              flutter-wayland-client-runtimerelease \
              flutter-gallery-runtimerelease \
              flutter-test-plugins-runtimerelease \
              flutter-test-secure-storage-runtimerelease \
              flutter-test-texture-egl-runtimerelease \
              flutter-test-video-player-runtimerelease \
              flutter-test-localization-runtimerelease \
              gstreamer1.0 \
              gstreamer1.0-libav \
              gstreamer1.0-plugins-bad \
              gstreamer1.0-plugins-base \
              gstreamer1.0-plugins-good \
              gstreamer1.0-plugins-ugly \
              ffmpeg \
              "' >> ./conf/local.conf
          echo 'CORE_IMAGE_EXTRA_INSTALL:append = " \
              packagegroup-self-hosted-sdk \
              packagegroup-self-hosted-extended \
              "' >> ./conf/local.conf
          echo '********** ./conf/local.conf **********'
          cat ./conf/local.conf
          echo '***************************************'
          bitbake-layers show-layers
          bitbake-layers add-layer \
              ../meta-openembedded/meta-oe \
              ../meta-openembedded/meta-python \
              ../meta-openembedded/meta-networking \
              ../meta-clang \
              ../../meta-flutter
          bitbake-layers show-layers
          echo '***************************************'
          bitbake -e virtual/kernel | grep "^PV"
          bitbake -e virtual/kernel | grep "^PN"
          echo '***************************************'
          bitbake -e core-image-minimal | grep "^DISTRO_FEATURES"
          echo '***************************************'
          bitbake -e > bb.environment
          bitbake ca-certificates -c do_cleansstate
          bitbake ca-certificates-native -c do_cleansstate
          bitbake flutter-sdk-native -c do_cleansstate

      - name: Build core-image-minimal
        shell: bash
        working-directory: ../yocto-kirkstone
        run: |
          . ./poky/oe-init-build-env
          bitbake core-image-minimal
          rm -rf ${ARTIFACTS}/*
          cp bb.environment $ARTIFACTS
          cp tmp/deploy/images/$MACHINE/${IMAGE}-${MACHINE}.tar.bz2 $ARTIFACTS

      - name: Publish SD card image artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.MACHINE }}-${{ env.IMAGE }}
          path: |
            /home/dev/artifacts/*
